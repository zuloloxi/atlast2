; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\A15\facultate\forth\atlast-2.0\atlmain.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_heap:DWORD
_DATA	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03DHJCLLDI@?9?$DO?5?$AA@			; `string'
PUBLIC	??_C@_03PKFMNEBO@?3?$DO?5?$AA@			; `string'
PUBLIC	??_C@_03BGPEMFHA@?$CI?5?5?$AA@			; `string'
PUBLIC	??_C@_0BO@KPFHHMGJ@?6Error?5?$CFd?5in?5include?5file?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@KJGOLJOE@Unable?5to?5open?5include?5file?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@JKHGNLHE@Unable?5to?5open?5file?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_04FOAGONMG@?4atl?$AA@			; `string'
PUBLIC	??_C@_0BG@MKAGPIPI@Duplicate?5file?5name?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@JFHJPPBK@?5?5?5?5?5?5?5?5?5?5?5?9U?5?5?5?5?5Print?5this?5mes@ ; `string'
PUBLIC	??_C@_0CC@PKGEKIKC@?5?5?5?5?5?5?5?5?5?5?5?9T?5?5?5?5?5Set?5TRACE?5mode@ ; `string'
PUBLIC	??_C@_0CC@IHINJHFB@?5?5?5?5?5?5?5?5?5?5?5?9Sn?5?5?5?5Stack?5length?5n@ ; `string'
PUBLIC	??_C@_0CJ@DIGEJAC@?5?5?5?5?5?5?5?5?5?5?5?9Rn?5?5?5?5Return?5stack?5l@ ; `string'
PUBLIC	??_C@_0DB@KBGOPGBN@?5?5?5?5?5?5?5?5?5?5?5?9Ifile?5Include?5named?5@ ; `string'
PUBLIC	??_C@_0CB@HKJNMKAH@?5?5?5?5?5?5?5?5?5?5?5?9Hn?5?5?5?5Heap?5length?5n?6@ ; `string'
PUBLIC	??_C@_0CN@CJNLNJCI@?5?5?5?5?5?5?5?5?5?5?5?9D?5?5?5?5?5Treat?5file?5as?5@ ; `string'
PUBLIC	??_C@_0BC@EIFDGCCA@?5?5?5?5?5?5?5?5Options?3?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@MMPGPBPM@Usage?3?5?5ATLAST?5?$FLoptions?$FN?5?$FLinputf@ ; `string'
PUBLIC	??_C@_0EI@OFCIMGC@ATLAST?52?40?5?$CI2014?907?904?$CJ?5?$FL64?9bit?$FN@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_main
EXTRN	_atl_eval:PROC
EXTRN	__imp__fgets:PROC
EXTRN	_atl_comment:QWORD
EXTRN	__imp__signal:PROC
EXTRN	__imp__printf:PROC
EXTRN	__imp__fclose:PROC
EXTRN	_atl_load:PROC
EXTRN	__imp__fopen:PROC
EXTRN	_strcat:PROC
EXTRN	__imp__strchr:PROC
EXTRN	_strcpy:PROC
EXTRN	_atl_trace:QWORD
EXTRN	_atl_stklen:QWORD
EXTRN	_atl_rstklen:QWORD
EXTRN	_atl_heaplen:QWORD
EXTRN	__imp__atol:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp__islower:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
; File c:\a15\facultate\forth\atlast-2.0\atlmain.c
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DHJCLLDI@?9?$DO?5?$AA@
CONST	SEGMENT
??_C@_03DHJCLLDI@?9?$DO?5?$AA@ DB '-> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKFMNEBO@?3?$DO?5?$AA@
CONST	SEGMENT
??_C@_03PKFMNEBO@?3?$DO?5?$AA@ DB ':> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BGPEMFHA@?$CI?5?5?$AA@
CONST	SEGMENT
??_C@_03BGPEMFHA@?$CI?5?5?$AA@ DB '(  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KPFHHMGJ@?6Error?5?$CFd?5in?5include?5file?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BO@KPFHHMGJ@?6Error?5?$CFd?5in?5include?5file?5?$CFs?6?$AA@ DB 0aH
	DB	'Error %d in include file %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KJGOLJOE@Unable?5to?5open?5include?5file?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0CA@KJGOLJOE@Unable?5to?5open?5include?5file?5?$CFs?6?$AA@ DB 'Unab'
	DB	'le to open include file %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JKHGNLHE@Unable?5to?5open?5file?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BI@JKHGNLHE@Unable?5to?5open?5file?5?$CFs?6?$AA@ DB 'Unable to ope'
	DB	'n file %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOAGONMG@?4atl?$AA@
CONST	SEGMENT
??_C@_04FOAGONMG@?4atl?$AA@ DB '.atl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MKAGPIPI@Duplicate?5file?5name?4?6?$AA@
CONST	SEGMENT
??_C@_0BG@MKAGPIPI@Duplicate?5file?5name?4?6?$AA@ DB 'Duplicate file name'
	DB	'.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JFHJPPBK@?5?5?5?5?5?5?5?5?5?5?5?9U?5?5?5?5?5Print?5this?5mes@
CONST	SEGMENT
??_C@_0CG@JFHJPPBK@?5?5?5?5?5?5?5?5?5?5?5?9U?5?5?5?5?5Print?5this?5mes@ DB ' '
	DB	'          -U     Print this message', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PKGEKIKC@?5?5?5?5?5?5?5?5?5?5?5?9T?5?5?5?5?5Set?5TRACE?5mode@
CONST	SEGMENT
??_C@_0CC@PKGEKIKC@?5?5?5?5?5?5?5?5?5?5?5?9T?5?5?5?5?5Set?5TRACE?5mode@ DB ' '
	DB	'          -T     Set TRACE mode', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IHINJHFB@?5?5?5?5?5?5?5?5?5?5?5?9Sn?5?5?5?5Stack?5length?5n@
CONST	SEGMENT
??_C@_0CC@IHINJHFB@?5?5?5?5?5?5?5?5?5?5?5?9Sn?5?5?5?5Stack?5length?5n@ DB ' '
	DB	'          -Sn    Stack length n', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DIGEJAC@?5?5?5?5?5?5?5?5?5?5?5?9Rn?5?5?5?5Return?5stack?5l@
CONST	SEGMENT
??_C@_0CJ@DIGEJAC@?5?5?5?5?5?5?5?5?5?5?5?9Rn?5?5?5?5Return?5stack?5l@ DB ' '
	DB	'          -Rn    Return stack length n', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KBGOPGBN@?5?5?5?5?5?5?5?5?5?5?5?9Ifile?5Include?5named?5@
CONST	SEGMENT
??_C@_0DB@KBGOPGBN@?5?5?5?5?5?5?5?5?5?5?5?9Ifile?5Include?5named?5@ DB ' '
	DB	'          -Ifile Include named definition file', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HKJNMKAH@?5?5?5?5?5?5?5?5?5?5?5?9Hn?5?5?5?5Heap?5length?5n?6@
CONST	SEGMENT
??_C@_0CB@HKJNMKAH@?5?5?5?5?5?5?5?5?5?5?5?9Hn?5?5?5?5Heap?5length?5n?6@ DB ' '
	DB	'          -Hn    Heap length n', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CJNLNJCI@?5?5?5?5?5?5?5?5?5?5?5?9D?5?5?5?5?5Treat?5file?5as?5@
CONST	SEGMENT
??_C@_0CN@CJNLNJCI@?5?5?5?5?5?5?5?5?5?5?5?9D?5?5?5?5?5Treat?5file?5as?5@ DB ' '
	DB	'          -D     Treat file as definitions', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EIFDGCCA@?5?5?5?5?5?5?5?5Options?3?6?$AA@
CONST	SEGMENT
??_C@_0BC@EIFDGCCA@?5?5?5?5?5?5?5?5Options?3?6?$AA@ DB '        Options:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MMPGPBPM@Usage?3?5?5ATLAST?5?$FLoptions?$FN?5?$FLinputf@
CONST	SEGMENT
??_C@_0CG@MMPGPBPM@Usage?3?5?5ATLAST?5?$FLoptions?$FN?5?$FLinputf@ DB 'Us'
	DB	'age:  ATLAST [options] [inputfile]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@OFCIMGC@ATLAST?52?40?5?$CI2014?907?904?$CJ?5?$FL64?9bit?$FN@
CONST	SEGMENT
??_C@_0EI@OFCIMGC@ATLAST?52?40?5?$CI2014?907?904?$CJ?5?$FL64?9bit?$FN@ DB 'A'
	DB	'TLAST 2.0 (2014-07-04) [64-bit] This program is in the public'
	DB	' domain.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _main
_TEXT	SEGMENT
tv233 = -824						; size = 4
tv448 = -820						; size = 4
tv235 = -816						; size = 4
tv85 = -816						; size = 4
_t$5315 = -616						; size = 132
_fp$5298 = -476						; size = 4
_fn$5297 = -464						; size = 132
_stat$5296 = -324					; size = 4
_fn$5279 = -312						; size = 132
_opt$5246 = -169					; size = 1
_cp$5245 = -160						; size = 4
_in$ = -148						; size = 4
_include$ = -136					; size = 80
_ifp$ = -48						; size = 4
_defmode$ = -36						; size = 4
_fname$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 03 00
	00		 sub	 esp, 824		; 00000338H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-824]
  00012	b9 ce 00 00 00	 mov	 ecx, 206		; 000000ceH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 46   :     int i;
; 47   :     int fname = FALSE, defmode = FALSE;

  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _fname$[ebp], 0
  0002f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _defmode$[ebp], 0

; 48   :     FILE *ifp;
; 49   :     char *include[20];
; 50   :     int in = 0;

  00036	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _in$[ebp], 0

; 51   : #define PR(x) (void) fprintf(stderr, x)
; 52   : 
; 53   :     PR("ATLAST 2.0 (2014-07-04) [64-bit] This program is in the public domain.\n");

  00040	8b f4		 mov	 esi, esp
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@OFCIMGC@ATLAST?52?40?5?$CI2014?907?904?$CJ?5?$FL64?9bit?$FN@
  00047	8b fc		 mov	 edi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0004f	3b fc		 cmp	 edi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	83 c0 40	 add	 eax, 64			; 00000040H
  00059	50		 push	 eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00060	83 c4 08	 add	 esp, 8
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 54   :     ifp = stdin;

  0006a	8b f4		 mov	 esi, esp
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	89 45 d0	 mov	 DWORD PTR _ifp$[ebp], eax

; 55   :     for (i = 1; i < argc; i++) {

  0007c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00083	eb 09		 jmp	 SHORT $LN30@main
$LN29@main:
  00085	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00088	83 c0 01	 add	 eax, 1
  0008b	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN30@main:
  0008e	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00091	3b 45 08	 cmp	 eax, DWORD PTR _argc$[ebp]
  00094	0f 8d 06 04 00
	00		 jge	 $LN28@main

; 56   : 	char *cp, opt;
; 57   : 
; 58   : 	cp = argv[i];

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  000a0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000a3	89 95 60 ff ff
	ff		 mov	 DWORD PTR _cp$5245[ebp], edx

; 59   :         if (*cp == '-') {

  000a9	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  000af	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000b2	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  000b5	0f 85 f4 02 00
	00		 jne	 $LN27@main

; 60   : 	    opt = *(++cp);

  000bb	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  000c1	83 c0 01	 add	 eax, 1
  000c4	89 85 60 ff ff
	ff		 mov	 DWORD PTR _cp$5245[ebp], eax
  000ca	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _cp$5245[ebp]
  000d0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000d2	88 95 57 ff ff
	ff		 mov	 BYTE PTR _opt$5246[ebp], dl

; 61   : 	    if (islower(opt))

  000d8	0f be 85 57 ff
	ff ff		 movsx	 eax, BYTE PTR _opt$5246[ebp]
  000df	8b f4		 mov	 esi, esp
  000e1	50		 push	 eax
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__islower
  000e8	83 c4 04	 add	 esp, 4
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	85 c0		 test	 eax, eax
  000f4	74 20		 je	 SHORT $LN26@main

; 62   : 		opt = toupper(opt);

  000f6	0f be 85 57 ff
	ff ff		 movsx	 eax, BYTE PTR _opt$5246[ebp]
  000fd	8b f4		 mov	 esi, esp
  000ff	50		 push	 eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00106	83 c4 04	 add	 esp, 4
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	88 85 57 ff ff
	ff		 mov	 BYTE PTR _opt$5246[ebp], al
$LN26@main:

; 63   : 	    switch (opt) {

  00116	0f be 85 57 ff
	ff ff		 movsx	 eax, BYTE PTR _opt$5246[ebp]
  0011d	89 85 d0 fc ff
	ff		 mov	 DWORD PTR tv85[ebp], eax
  00123	8b 8d d0 fc ff
	ff		 mov	 ecx, DWORD PTR tv85[ebp]
  00129	83 e9 3f	 sub	 ecx, 63			; 0000003fH
  0012c	89 8d d0 fc ff
	ff		 mov	 DWORD PTR tv85[ebp], ecx
  00132	83 bd d0 fc ff
	ff 16		 cmp	 DWORD PTR tv85[ebp], 22	; 00000016H
  00139	0f 87 6b 02 00
	00		 ja	 $LN24@main
  0013f	8b 95 d0 fc ff
	ff		 mov	 edx, DWORD PTR tv85[ebp]
  00145	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN38@main[edx]
  0014c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN45@main[eax*4]
$LN23@main:

; 64   : 
; 65   :                 case 'D':
; 66   : 		    defmode = TRUE;

  00153	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _defmode$[ebp], 1

; 67   : 		    break;

  0015a	e9 4b 02 00 00	 jmp	 $LN24@main
$LN22@main:

; 68   : 
; 69   :                 case 'H':
; 70   : 		    atl_heaplen = atol(cp + 1);

  0015f	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  00165	83 c0 01	 add	 eax, 1
  00168	8b f4		 mov	 esi, esp
  0016a	50		 push	 eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  00171	83 c4 04	 add	 esp, 4
  00174	3b f4		 cmp	 esi, esp
  00176	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017b	99		 cdq
  0017c	a3 00 00 00 00	 mov	 DWORD PTR _atl_heaplen, eax
  00181	89 15 04 00 00
	00		 mov	 DWORD PTR _atl_heaplen+4, edx

; 71   : 		    break;

  00187	e9 1e 02 00 00	 jmp	 $LN24@main
$LN21@main:

; 72   : 
; 73   :                 case 'I':
; 74   : 		    include[in++] = cp + 1;

  0018c	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  00192	83 c0 01	 add	 eax, 1
  00195	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _in$[ebp]
  0019b	89 84 8d 78 ff
	ff ff		 mov	 DWORD PTR _include$[ebp+ecx*4], eax
  001a2	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _in$[ebp]
  001a8	83 c2 01	 add	 edx, 1
  001ab	89 95 6c ff ff
	ff		 mov	 DWORD PTR _in$[ebp], edx

; 75   : 		    break;

  001b1	e9 f4 01 00 00	 jmp	 $LN24@main
$LN20@main:

; 76   : 
; 77   :                 case 'R':
; 78   : 		    atl_rstklen = atol(cp + 1);

  001b6	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  001bc	83 c0 01	 add	 eax, 1
  001bf	8b f4		 mov	 esi, esp
  001c1	50		 push	 eax
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  001c8	83 c4 04	 add	 esp, 4
  001cb	3b f4		 cmp	 esi, esp
  001cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d2	99		 cdq
  001d3	a3 00 00 00 00	 mov	 DWORD PTR _atl_rstklen, eax
  001d8	89 15 04 00 00
	00		 mov	 DWORD PTR _atl_rstklen+4, edx

; 79   : 		    break;

  001de	e9 c7 01 00 00	 jmp	 $LN24@main
$LN19@main:

; 80   : 
; 81   :                 case 'S':
; 82   : 		    atl_stklen = atol(cp + 1);

  001e3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  001e9	83 c0 01	 add	 eax, 1
  001ec	8b f4		 mov	 esi, esp
  001ee	50		 push	 eax
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atol
  001f5	83 c4 04	 add	 esp, 4
  001f8	3b f4		 cmp	 esi, esp
  001fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ff	99		 cdq
  00200	a3 00 00 00 00	 mov	 DWORD PTR _atl_stklen, eax
  00205	89 15 04 00 00
	00		 mov	 DWORD PTR _atl_stklen+4, edx

; 83   : 		    break;

  0020b	e9 9a 01 00 00	 jmp	 $LN24@main
$LN18@main:

; 84   : 
; 85   :                 case 'T':
; 86   : 		    atl_trace = TRUE;

  00210	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _atl_trace, 1
  0021a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _atl_trace+4, 0

; 87   : 		    break;

  00224	e9 81 01 00 00	 jmp	 $LN24@main
$LN17@main:

; 88   : 
; 89   :                 case '?':
; 90   :                 case 'U':
; 91   :                     PR("Usage:  ATLAST [options] [inputfile]\n");

  00229	8b f4		 mov	 esi, esp
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MMPGPBPM@Usage?3?5?5ATLAST?5?$FLoptions?$FN?5?$FLinputf@
  00230	8b fc		 mov	 edi, esp
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00238	3b fc		 cmp	 edi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023f	83 c0 40	 add	 eax, 64			; 00000040H
  00242	50		 push	 eax
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00249	83 c4 08	 add	 esp, 8
  0024c	3b f4		 cmp	 esi, esp
  0024e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 92   :                     PR("        Options:\n");

  00253	8b f4		 mov	 esi, esp
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EIFDGCCA@?5?5?5?5?5?5?5?5Options?3?6?$AA@
  0025a	8b fc		 mov	 edi, esp
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00262	3b fc		 cmp	 edi, esp
  00264	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00269	83 c0 40	 add	 eax, 64			; 00000040H
  0026c	50		 push	 eax
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00273	83 c4 08	 add	 esp, 8
  00276	3b f4		 cmp	 esi, esp
  00278	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   :                     PR("           -D     Treat file as definitions\n");

  0027d	8b f4		 mov	 esi, esp
  0027f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@CJNLNJCI@?5?5?5?5?5?5?5?5?5?5?5?9D?5?5?5?5?5Treat?5file?5as?5@
  00284	8b fc		 mov	 edi, esp
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0028c	3b fc		 cmp	 edi, esp
  0028e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00293	83 c0 40	 add	 eax, 64			; 00000040H
  00296	50		 push	 eax
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0029d	83 c4 08	 add	 esp, 8
  002a0	3b f4		 cmp	 esi, esp
  002a2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 94   :                     PR("           -Hn    Heap length n\n");

  002a7	8b f4		 mov	 esi, esp
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HKJNMKAH@?5?5?5?5?5?5?5?5?5?5?5?9Hn?5?5?5?5Heap?5length?5n?6@
  002ae	8b fc		 mov	 edi, esp
  002b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  002b6	3b fc		 cmp	 edi, esp
  002b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002bd	83 c0 40	 add	 eax, 64			; 00000040H
  002c0	50		 push	 eax
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  002c7	83 c4 08	 add	 esp, 8
  002ca	3b f4		 cmp	 esi, esp
  002cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 95   :                     PR("           -Ifile Include named definition file\n");

  002d1	8b f4		 mov	 esi, esp
  002d3	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KBGOPGBN@?5?5?5?5?5?5?5?5?5?5?5?9Ifile?5Include?5named?5@
  002d8	8b fc		 mov	 edi, esp
  002da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  002e0	3b fc		 cmp	 edi, esp
  002e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e7	83 c0 40	 add	 eax, 64			; 00000040H
  002ea	50		 push	 eax
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  002f1	83 c4 08	 add	 esp, 8
  002f4	3b f4		 cmp	 esi, esp
  002f6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 96   :                     PR("           -Rn    Return stack length n\n");

  002fb	8b f4		 mov	 esi, esp
  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DIGEJAC@?5?5?5?5?5?5?5?5?5?5?5?9Rn?5?5?5?5Return?5stack?5l@
  00302	8b fc		 mov	 edi, esp
  00304	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0030a	3b fc		 cmp	 edi, esp
  0030c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00311	83 c0 40	 add	 eax, 64			; 00000040H
  00314	50		 push	 eax
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0031b	83 c4 08	 add	 esp, 8
  0031e	3b f4		 cmp	 esi, esp
  00320	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 97   :                     PR("           -Sn    Stack length n\n");

  00325	8b f4		 mov	 esi, esp
  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@IHINJHFB@?5?5?5?5?5?5?5?5?5?5?5?9Sn?5?5?5?5Stack?5length?5n@
  0032c	8b fc		 mov	 edi, esp
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00334	3b fc		 cmp	 edi, esp
  00336	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033b	83 c0 40	 add	 eax, 64			; 00000040H
  0033e	50		 push	 eax
  0033f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00345	83 c4 08	 add	 esp, 8
  00348	3b f4		 cmp	 esi, esp
  0034a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 98   :                     PR("           -T     Set TRACE mode\n");

  0034f	8b f4		 mov	 esi, esp
  00351	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PKGEKIKC@?5?5?5?5?5?5?5?5?5?5?5?9T?5?5?5?5?5Set?5TRACE?5mode@
  00356	8b fc		 mov	 edi, esp
  00358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  0035e	3b fc		 cmp	 edi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	83 c0 40	 add	 eax, 64			; 00000040H
  00368	50		 push	 eax
  00369	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  0036f	83 c4 08	 add	 esp, 8
  00372	3b f4		 cmp	 esi, esp
  00374	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 99   :                     PR("           -U     Print this message\n");

  00379	8b f4		 mov	 esi, esp
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JFHJPPBK@?5?5?5?5?5?5?5?5?5?5?5?9U?5?5?5?5?5Print?5this?5mes@
  00380	8b fc		 mov	 edi, esp
  00382	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00388	3b fc		 cmp	 edi, esp
  0038a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0038f	83 c0 40	 add	 eax, 64			; 00000040H
  00392	50		 push	 eax
  00393	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00399	83 c4 08	 add	 esp, 8
  0039c	3b f4		 cmp	 esi, esp
  0039e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 100  : 		    return 0;

  003a3	33 c0		 xor	 eax, eax
  003a5	e9 68 03 00 00	 jmp	 $LN31@main
$LN24@main:

; 101  : 	    }
; 102  : 	} else {

  003aa	e9 ec 00 00 00	 jmp	 $LN16@main
$LN27@main:

; 103  : 	    char fn[132];
; 104  : 
; 105  : 	    if (fname) {

  003af	83 7d e8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  003b3	74 34		 je	 SHORT $LN15@main

; 106  :                 PR("Duplicate file name.\n");

  003b5	8b f4		 mov	 esi, esp
  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MKAGPIPI@Duplicate?5file?5name?4?6?$AA@
  003bc	8b fc		 mov	 edi, esp
  003be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  003c4	3b fc		 cmp	 edi, esp
  003c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003cb	83 c0 40	 add	 eax, 64			; 00000040H
  003ce	50		 push	 eax
  003cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  003d5	83 c4 08	 add	 esp, 8
  003d8	3b f4		 cmp	 esi, esp
  003da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  : 		return 1;

  003df	b8 01 00 00 00	 mov	 eax, 1
  003e4	e9 29 03 00 00	 jmp	 $LN31@main
$LN15@main:

; 108  : 	    }
; 109  : 	    fname = TRUE;

  003e9	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _fname$[ebp], 1

; 110  : 	    V strcpy(fn, cp);

  003f0	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _cp$5245[ebp]
  003f6	50		 push	 eax
  003f7	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _fn$5279[ebp]
  003fd	51		 push	 ecx
  003fe	e8 00 00 00 00	 call	 _strcpy
  00403	83 c4 08	 add	 esp, 8

; 111  :             if (strchr(fn, '.') == NULL)

  00406	8b f4		 mov	 esi, esp
  00408	6a 2e		 push	 46			; 0000002eH
  0040a	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5279[ebp]
  00410	50		 push	 eax
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00417	83 c4 08	 add	 esp, 8
  0041a	3b f4		 cmp	 esi, esp
  0041c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00421	85 c0		 test	 eax, eax
  00423	75 14		 jne	 SHORT $LN14@main

; 112  :                 V strcat(fn, ".atl");

  00425	68 00 00 00 00	 push	 OFFSET ??_C@_04FOAGONMG@?4atl?$AA@
  0042a	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5279[ebp]
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 _strcat
  00436	83 c4 08	 add	 esp, 8
$LN14@main:

; 113  :             ifp = fopen(fn, "r");

  00439	8b f4		 mov	 esi, esp
  0043b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00440	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5279[ebp]
  00446	50		 push	 eax
  00447	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0044d	83 c4 08	 add	 esp, 8
  00450	3b f4		 cmp	 esi, esp
  00452	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00457	89 45 d0	 mov	 DWORD PTR _ifp$[ebp], eax

; 114  : 	    if (ifp == NULL) {

  0045a	83 7d d0 00	 cmp	 DWORD PTR _ifp$[ebp], 0
  0045e	75 3b		 jne	 SHORT $LN16@main

; 115  :                 V fprintf(stderr, "Unable to open file %s\n", fn);

  00460	8b f4		 mov	 esi, esp
  00462	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5279[ebp]
  00468	50		 push	 eax
  00469	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JKHGNLHE@Unable?5to?5open?5file?5?$CFs?6?$AA@
  0046e	8b fc		 mov	 edi, esp
  00470	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00476	3b fc		 cmp	 edi, esp
  00478	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0047d	83 c0 40	 add	 eax, 64			; 00000040H
  00480	50		 push	 eax
  00481	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00487	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048a	3b f4		 cmp	 esi, esp
  0048c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 116  : 		return 1;

  00491	b8 01 00 00 00	 mov	 eax, 1
  00496	e9 77 02 00 00	 jmp	 $LN31@main
$LN16@main:

; 117  : 	    }
; 118  : 	}
; 119  :      }

  0049b	e9 e5 fb ff ff	 jmp	 $LN29@main
$LN28@main:

; 120  : 
; 121  :     /* If any include files were named, load each in turn before
; 122  :        we execute the program. */
; 123  : 
; 124  :     for (i = 0; i < in; i++) {

  004a0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004a7	eb 09		 jmp	 SHORT $LN12@main
$LN11@main:
  004a9	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004ac	83 c0 01	 add	 eax, 1
  004af	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN12@main:
  004b2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004b5	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _in$[ebp]
  004bb	0f 8d 1e 01 00
	00		 jge	 $LN10@main

; 125  : 	int stat;
; 126  : 	char fn[132];
; 127  : 	FILE *fp;
; 128  : 
; 129  : 	V strcpy(fn, include[i]);

  004c1	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004c4	8b 8c 85 78 ff
	ff ff		 mov	 ecx, DWORD PTR _include$[ebp+eax*4]
  004cb	51		 push	 ecx
  004cc	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR _fn$5297[ebp]
  004d2	52		 push	 edx
  004d3	e8 00 00 00 00	 call	 _strcpy
  004d8	83 c4 08	 add	 esp, 8

; 130  :         if (strchr(fn, '.') == NULL)

  004db	8b f4		 mov	 esi, esp
  004dd	6a 2e		 push	 46			; 0000002eH
  004df	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5297[ebp]
  004e5	50		 push	 eax
  004e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  004ec	83 c4 08	 add	 esp, 8
  004ef	3b f4		 cmp	 esi, esp
  004f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f6	85 c0		 test	 eax, eax
  004f8	75 14		 jne	 SHORT $LN9@main

; 131  :             V strcat(fn, ".atl");

  004fa	68 00 00 00 00	 push	 OFFSET ??_C@_04FOAGONMG@?4atl?$AA@
  004ff	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5297[ebp]
  00505	50		 push	 eax
  00506	e8 00 00 00 00	 call	 _strcat
  0050b	83 c4 08	 add	 esp, 8
$LN9@main:

; 132  : 	fp = fopen(fn,
; 133  : #ifdef FBmode
; 134  :                         "rb"
; 135  : #else
; 136  :                         "r"
; 137  : #endif
; 138  : 		  );

  0050e	8b f4		 mov	 esi, esp
  00510	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00515	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5297[ebp]
  0051b	50		 push	 eax
  0051c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00522	83 c4 08	 add	 esp, 8
  00525	3b f4		 cmp	 esi, esp
  00527	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0052c	89 85 24 fe ff
	ff		 mov	 DWORD PTR _fp$5298[ebp], eax

; 139  : 	if (fp == NULL) {

  00532	83 bd 24 fe ff
	ff 00		 cmp	 DWORD PTR _fp$5298[ebp], 0
  00539	75 3f		 jne	 SHORT $LN8@main

; 140  :             V fprintf(stderr, "Unable to open include file %s\n",
; 141  : 		include[i]);

  0053b	8b f4		 mov	 esi, esp
  0053d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00540	8b 8c 85 78 ff
	ff ff		 mov	 ecx, DWORD PTR _include$[ebp+eax*4]
  00547	51		 push	 ecx
  00548	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KJGOLJOE@Unable?5to?5open?5include?5file?5?$CFs?6?$AA@
  0054d	8b fc		 mov	 edi, esp
  0054f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  00555	3b fc		 cmp	 edi, esp
  00557	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0055c	83 c0 40	 add	 eax, 64			; 00000040H
  0055f	50		 push	 eax
  00560	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00566	83 c4 0c	 add	 esp, 12			; 0000000cH
  00569	3b f4		 cmp	 esi, esp
  0056b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 142  : 	    return 1;

  00570	b8 01 00 00 00	 mov	 eax, 1
  00575	e9 98 01 00 00	 jmp	 $LN31@main
$LN8@main:

; 143  : 	}
; 144  : 	stat = atl_load(fp);

  0057a	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _fp$5298[ebp]
  00580	50		 push	 eax
  00581	e8 00 00 00 00	 call	 _atl_load
  00586	83 c4 04	 add	 esp, 4
  00589	89 85 bc fe ff
	ff		 mov	 DWORD PTR _stat$5296[ebp], eax

; 145  : 	V fclose(fp);

  0058f	8b f4		 mov	 esi, esp
  00591	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR _fp$5298[ebp]
  00597	50		 push	 eax
  00598	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0059e	83 c4 04	 add	 esp, 4
  005a1	3b f4		 cmp	 esi, esp
  005a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 146  : 	if (stat != ATL_SNORM) {

  005a8	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _stat$5296[ebp], 0
  005af	74 29		 je	 SHORT $LN7@main

; 147  :             V printf("\nError %d in include file %s\n", stat, include[i]);

  005b1	8b f4		 mov	 esi, esp
  005b3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  005b6	8b 8c 85 78 ff
	ff ff		 mov	 ecx, DWORD PTR _include$[ebp+eax*4]
  005bd	51		 push	 ecx
  005be	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _stat$5296[ebp]
  005c4	52		 push	 edx
  005c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KPFHHMGJ@?6Error?5?$CFd?5in?5include?5file?5?$CFs?6?$AA@
  005ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  005d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d3	3b f4		 cmp	 esi, esp
  005d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@main:

; 148  : 	}
; 149  :     }

  005da	e9 ca fe ff ff	 jmp	 $LN11@main
$LN10@main:

; 150  : 
; 151  :     /* Now that all the preliminaries are out of the way, fall into
; 152  :        the main ATLAST execution loop. */
; 153  : 
; 154  :     V signal(SIGINT, ctrlc);

  005df	8b f4		 mov	 esi, esp
  005e1	68 00 00 00 00	 push	 OFFSET _ctrlc
  005e6	6a 02		 push	 2
  005e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__signal
  005ee	83 c4 08	 add	 esp, 8
  005f1	3b f4		 cmp	 esi, esp
  005f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@main:

; 155  :     while (TRUE) {

  005f8	b8 01 00 00 00	 mov	 eax, 1
  005fd	85 c0		 test	 eax, eax
  005ff	0f 84 ee 00 00
	00		 je	 $LN5@main

; 156  : 	char t[132];
; 157  : 
; 158  : 	if (!fname)

  00605	83 7d e8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  00609	75 7c		 jne	 SHORT $LN4@main

; 159  :             V printf(atl_comment ? "(  " :  /* Show pending comment */
; 160  : 		/* Show compiling state */
; 161  :                 (((heap != NULL) && state) ? ":> " : "-> "));

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR _atl_comment
  00610	0b 05 04 00 00
	00		 or	 eax, DWORD PTR _atl_comment+4
  00616	74 0c		 je	 SHORT $LN35@main
  00618	c7 85 d0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv235[ebp], OFFSET ??_C@_03BGPEMFHA@?$CI?5?5?$AA@
  00622	eb 4a		 jmp	 SHORT $LN36@main
$LN35@main:
  00624	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _heap, 0
  0062b	74 2b		 je	 SHORT $LN33@main
  0062d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _heap
  00633	89 8d cc fc ff
	ff		 mov	 DWORD PTR tv448[ebp], ecx
  00639	8b 95 cc fc ff
	ff		 mov	 edx, DWORD PTR tv448[ebp]
  0063f	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR tv448[ebp]
  00645	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00647	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  0064a	74 0c		 je	 SHORT $LN33@main
  0064c	c7 85 c8 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], OFFSET ??_C@_03PKFMNEBO@?3?$DO?5?$AA@
  00656	eb 0a		 jmp	 SHORT $LN34@main
$LN33@main:
  00658	c7 85 c8 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], OFFSET ??_C@_03DHJCLLDI@?9?$DO?5?$AA@
$LN34@main:
  00662	8b 95 c8 fc ff
	ff		 mov	 edx, DWORD PTR tv233[ebp]
  00668	89 95 d0 fc ff
	ff		 mov	 DWORD PTR tv235[ebp], edx
$LN36@main:
  0066e	8b f4		 mov	 esi, esp
  00670	8b 85 d0 fc ff
	ff		 mov	 eax, DWORD PTR tv235[ebp]
  00676	50		 push	 eax
  00677	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0067d	83 c4 04	 add	 esp, 4
  00680	3b f4		 cmp	 esi, esp
  00682	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@main:

; 162  : 	if (fgets(t, 132, ifp) == NULL) {

  00687	8b f4		 mov	 esi, esp
  00689	8b 45 d0	 mov	 eax, DWORD PTR _ifp$[ebp]
  0068c	50		 push	 eax
  0068d	68 84 00 00 00	 push	 132			; 00000084H
  00692	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR _t$5315[ebp]
  00698	51		 push	 ecx
  00699	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  0069f	83 c4 0c	 add	 esp, 12			; 0000000cH
  006a2	3b f4		 cmp	 esi, esp
  006a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006a9	85 c0		 test	 eax, eax
  006ab	75 32		 jne	 SHORT $LN3@main

; 163  : 	    if (fname && defmode) {

  006ad	83 7d e8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  006b1	74 2a		 je	 SHORT $LN2@main
  006b3	83 7d dc 00	 cmp	 DWORD PTR _defmode$[ebp], 0
  006b7	74 24		 je	 SHORT $LN2@main

; 164  : 		fname = defmode = FALSE;

  006b9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _defmode$[ebp], 0
  006c0	8b 45 dc	 mov	 eax, DWORD PTR _defmode$[ebp]
  006c3	89 45 e8	 mov	 DWORD PTR _fname$[ebp], eax

; 165  : 		ifp = stdin;

  006c6	8b f4		 mov	 esi, esp
  006c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____iob_func
  006ce	3b f4		 cmp	 esi, esp
  006d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006d5	89 45 d0	 mov	 DWORD PTR _ifp$[ebp], eax

; 166  : 		continue;

  006d8	e9 1b ff ff ff	 jmp	 $LN6@main
$LN2@main:

; 167  : 	    }
; 168  : 	    break;

  006dd	eb 14		 jmp	 SHORT $LN5@main
$LN3@main:

; 169  : 	}
; 170  : 	V atl_eval(t);

  006df	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _t$5315[ebp]
  006e5	50		 push	 eax
  006e6	e8 00 00 00 00	 call	 _atl_eval
  006eb	83 c4 04	 add	 esp, 4

; 171  :     }

  006ee	e9 05 ff ff ff	 jmp	 $LN6@main
$LN5@main:

; 172  :     if (!fname)

  006f3	83 7d e8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  006f7	75 17		 jne	 SHORT $LN1@main

; 173  :         V printf("\n");

  006f9	8b f4		 mov	 esi, esp
  006fb	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00700	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00706	83 c4 04	 add	 esp, 4
  00709	3b f4		 cmp	 esi, esp
  0070b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@main:

; 174  :     return 0;

  00710	33 c0		 xor	 eax, eax
$LN31@main:

; 175  : }

  00712	52		 push	 edx
  00713	8b cd		 mov	 ecx, ebp
  00715	50		 push	 eax
  00716	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN44@main
  0071c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00721	58		 pop	 eax
  00722	5a		 pop	 edx
  00723	5f		 pop	 edi
  00724	5e		 pop	 esi
  00725	5b		 pop	 ebx
  00726	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00729	33 cd		 xor	 ecx, ebp
  0072b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00730	81 c4 38 03 00
	00		 add	 esp, 824		; 00000338H
  00736	3b ec		 cmp	 ebp, esp
  00738	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0073d	8b e5		 mov	 esp, ebp
  0073f	5d		 pop	 ebp
  00740	c3		 ret	 0
  00741	8d 49 00	 npad	 3
$LN44@main:
  00744	04 00 00 00	 DD	 4
  00748	00 00 00 00	 DD	 $LN43@main
$LN43@main:
  0074c	78 ff ff ff	 DD	 -136			; ffffff78H
  00750	50 00 00 00	 DD	 80			; 00000050H
  00754	00 00 00 00	 DD	 $LN39@main
  00758	c8 fe ff ff	 DD	 -312			; fffffec8H
  0075c	84 00 00 00	 DD	 132			; 00000084H
  00760	00 00 00 00	 DD	 $LN40@main
  00764	30 fe ff ff	 DD	 -464			; fffffe30H
  00768	84 00 00 00	 DD	 132			; 00000084H
  0076c	00 00 00 00	 DD	 $LN41@main
  00770	98 fd ff ff	 DD	 -616			; fffffd98H
  00774	84 00 00 00	 DD	 132			; 00000084H
  00778	00 00 00 00	 DD	 $LN42@main
$LN42@main:
  0077c	74		 DB	 116			; 00000074H
  0077d	00		 DB	 0
$LN41@main:
  0077e	66		 DB	 102			; 00000066H
  0077f	6e		 DB	 110			; 0000006eH
  00780	00		 DB	 0
$LN40@main:
  00781	66		 DB	 102			; 00000066H
  00782	6e		 DB	 110			; 0000006eH
  00783	00		 DB	 0
$LN39@main:
  00784	69		 DB	 105			; 00000069H
  00785	6e		 DB	 110			; 0000006eH
  00786	63		 DB	 99			; 00000063H
  00787	6c		 DB	 108			; 0000006cH
  00788	75		 DB	 117			; 00000075H
  00789	64		 DB	 100			; 00000064H
  0078a	65		 DB	 101			; 00000065H
  0078b	00		 DB	 0
$LN45@main:
  0078c	00 00 00 00	 DD	 $LN17@main
  00790	00 00 00 00	 DD	 $LN23@main
  00794	00 00 00 00	 DD	 $LN22@main
  00798	00 00 00 00	 DD	 $LN21@main
  0079c	00 00 00 00	 DD	 $LN20@main
  007a0	00 00 00 00	 DD	 $LN19@main
  007a4	00 00 00 00	 DD	 $LN18@main
  007a8	00 00 00 00	 DD	 $LN24@main
$LN38@main:
  007ac	00		 DB	 0
  007ad	07		 DB	 7
  007ae	07		 DB	 7
  007af	07		 DB	 7
  007b0	07		 DB	 7
  007b1	01		 DB	 1
  007b2	07		 DB	 7
  007b3	07		 DB	 7
  007b4	07		 DB	 7
  007b5	02		 DB	 2
  007b6	03		 DB	 3
  007b7	07		 DB	 7
  007b8	07		 DB	 7
  007b9	07		 DB	 7
  007ba	07		 DB	 7
  007bb	07		 DB	 7
  007bc	07		 DB	 7
  007bd	07		 DB	 7
  007be	07		 DB	 7
  007bf	04		 DB	 4
  007c0	05		 DB	 5
  007c1	06		 DB	 6
  007c2	00		 DB	 0
_main	ENDP
_TEXT	ENDS
EXTRN	_atl_break:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ctrlc
_TEXT	SEGMENT
_sig$ = 8						; size = 4
_ctrlc	PROC						; COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 36   :     if (sig == SIGINT)

  0001e	83 7d 08 02	 cmp	 DWORD PTR _sig$[ebp], 2
  00022	75 05		 jne	 SHORT $LN2@ctrlc

; 37   : 	atl_break();

  00024	e8 00 00 00 00	 call	 _atl_break
$LN2@ctrlc:

; 38   : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_ctrlc	ENDP
_TEXT	ENDS
END
