; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\A15\facultate\forth\atlast-2.0\atlmain.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_heap:DWORD
$SG5214	DB	'ATLAST 2.0 (2014-07-04) [64-bit] This program is in the '
	DB	'public domain.', 0aH, 00H
$SG5234	DB	'Usage:  ATLAST [options] [inputfile]', 0aH, 00H
	ORG $+2
$SG5236	DB	'        Options:', 0aH, 00H
	ORG $+2
$SG5238	DB	'           -D     Treat file as definitions', 0aH, 00H
	ORG $+3
$SG5240	DB	'           -Hn    Heap length n', 0aH, 00H
	ORG $+3
$SG5242	DB	'           -Ifile Include named definition file', 0aH, 00H
	ORG $+3
$SG5244	DB	'           -Rn    Return stack length n', 0aH, 00H
	ORG $+3
$SG5246	DB	'           -Sn    Stack length n', 0aH, 00H
	ORG $+2
$SG5248	DB	'           -T     Set TRACE mode', 0aH, 00H
	ORG $+2
$SG5250	DB	'           -U     Print this message', 0aH, 00H
	ORG $+2
$SG5255	DB	'Duplicate file name.', 0aH, 00H
	ORG $+2
$SG5260	DB	'.atl', 00H
	ORG $+3
$SG5261	DB	'r', 00H
	ORG $+2
$SG5265	DB	'Unable to open file %s', 0aH, 00H
$SG5276	DB	'.atl', 00H
	ORG $+3
$SG5277	DB	'r', 00H
	ORG $+2
$SG5281	DB	'Unable to open include file %s', 0aH, 00H
$SG5285	DB	0aH, 'Error %d in include file %s', 0aH, 00H
	ORG $+2
$SG5294	DB	'(  ', 00H
$SG5295	DB	':> ', 00H
$SG5296	DB	'-> ', 00H
$SG5303	DB	0aH, 00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_main
EXTRN	_atl_eval:PROC
EXTRN	_fgets:PROC
EXTRN	_atl_comment:QWORD
EXTRN	_signal:PROC
EXTRN	_printf:PROC
EXTRN	_fclose:PROC
EXTRN	_atl_load:PROC
EXTRN	_fopen:PROC
EXTRN	_strcat:PROC
EXTRN	_strchr:PROC
EXTRN	_strcpy:PROC
EXTRN	_atl_trace:QWORD
EXTRN	_atl_stklen:QWORD
EXTRN	_atl_rstklen:QWORD
EXTRN	_atl_heaplen:QWORD
EXTRN	_atol:PROC
EXTRN	_toupper:PROC
EXTRN	_islower:PROC
EXTRN	_fprintf:PROC
EXTRN	___iob_func:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
; File c:\a15\facultate\forth\atlast-2.0\atlmain.c
_TEXT	SEGMENT
tv233 = -552						; size = 4
tv370 = -548						; size = 4
tv235 = -544						; size = 4
tv85 = -540						; size = 4
_t$5290 = -536						; size = 132
_fn$5270 = -400						; size = 132
_stat$5269 = -264					; size = 4
_fp$5271 = -260						; size = 4
_fn$5252 = -256						; size = 132
__$ArrayPad$ = -116					; size = 4
_opt$5219 = -109					; size = 1
_cp$5218 = -108						; size = 4
_defmode$ = -104					; size = 4
_in$ = -100						; size = 4
_include$ = -96						; size = 80
_i$ = -12						; size = 4
_fname$ = -8						; size = 4
_ifp$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 8c	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 46   :     int i;
; 47   :     int fname = FALSE, defmode = FALSE;

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fname$[ebp], 0
  0001a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _defmode$[ebp], 0

; 48   :     FILE *ifp;
; 49   :     char *include[20];
; 50   :     int in = 0;

  00021	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _in$[ebp], 0

; 51   : #define PR(x) (void) fprintf(stderr, x)
; 52   : 
; 53   :     PR("ATLAST 2.0 (2014-07-04) [64-bit] This program is in the public domain.\n");

  00028	68 00 00 00 00	 push	 OFFSET $SG5214
  0002d	e8 00 00 00 00	 call	 ___iob_func
  00032	83 c0 40	 add	 eax, 64			; 00000040H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _fprintf
  0003b	83 c4 08	 add	 esp, 8

; 54   :     ifp = stdin;

  0003e	e8 00 00 00 00	 call	 ___iob_func
  00043	89 45 fc	 mov	 DWORD PTR _ifp$[ebp], eax

; 55   :     for (i = 1; i < argc; i++) {

  00046	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0004d	eb 09		 jmp	 SHORT $LN30@main
$LN29@main:
  0004f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN30@main:
  00058	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0005b	3b 4d 08	 cmp	 ecx, DWORD PTR _argc$[ebp]
  0005e	0f 8d ab 02 00
	00		 jge	 $LN28@main

; 56   : 	char *cp, opt;
; 57   : 
; 58   : 	cp = argv[i];

  00064	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00067	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  0006a	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0006d	89 4d 94	 mov	 DWORD PTR _cp$5218[ebp], ecx

; 59   :         if (*cp == '-') {

  00070	8b 55 94	 mov	 edx, DWORD PTR _cp$5218[ebp]
  00073	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00076	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00079	0f 85 de 01 00
	00		 jne	 $LN27@main

; 60   : 	    opt = *(++cp);

  0007f	8b 4d 94	 mov	 ecx, DWORD PTR _cp$5218[ebp]
  00082	83 c1 01	 add	 ecx, 1
  00085	89 4d 94	 mov	 DWORD PTR _cp$5218[ebp], ecx
  00088	8b 55 94	 mov	 edx, DWORD PTR _cp$5218[ebp]
  0008b	8a 02		 mov	 al, BYTE PTR [edx]
  0008d	88 45 93	 mov	 BYTE PTR _opt$5219[ebp], al

; 61   : 	    if (islower(opt))

  00090	0f be 4d 93	 movsx	 ecx, BYTE PTR _opt$5219[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _islower
  0009a	83 c4 04	 add	 esp, 4
  0009d	85 c0		 test	 eax, eax
  0009f	74 10		 je	 SHORT $LN26@main

; 62   : 		opt = toupper(opt);

  000a1	0f be 55 93	 movsx	 edx, BYTE PTR _opt$5219[ebp]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _toupper
  000ab	83 c4 04	 add	 esp, 4
  000ae	88 45 93	 mov	 BYTE PTR _opt$5219[ebp], al
$LN26@main:

; 63   : 	    switch (opt) {

  000b1	0f be 45 93	 movsx	 eax, BYTE PTR _opt$5219[ebp]
  000b5	89 85 e4 fd ff
	ff		 mov	 DWORD PTR tv85[ebp], eax
  000bb	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR tv85[ebp]
  000c1	83 e9 3f	 sub	 ecx, 63			; 0000003fH
  000c4	89 8d e4 fd ff
	ff		 mov	 DWORD PTR tv85[ebp], ecx
  000ca	83 bd e4 fd ff
	ff 16		 cmp	 DWORD PTR tv85[ebp], 22	; 00000016H
  000d1	0f 87 81 01 00
	00		 ja	 $LN24@main
  000d7	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR tv85[ebp]
  000dd	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN38@main[edx]
  000e4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN39@main[eax*4]
$LN23@main:

; 64   : 
; 65   :                 case 'D':
; 66   : 		    defmode = TRUE;

  000eb	c7 45 98 01 00
	00 00		 mov	 DWORD PTR _defmode$[ebp], 1

; 67   : 		    break;

  000f2	e9 61 01 00 00	 jmp	 $LN24@main
$LN22@main:

; 68   : 
; 69   :                 case 'H':
; 70   : 		    atl_heaplen = atol(cp + 1);

  000f7	8b 4d 94	 mov	 ecx, DWORD PTR _cp$5218[ebp]
  000fa	83 c1 01	 add	 ecx, 1
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 _atol
  00103	83 c4 04	 add	 esp, 4
  00106	99		 cdq
  00107	a3 00 00 00 00	 mov	 DWORD PTR _atl_heaplen, eax
  0010c	89 15 04 00 00
	00		 mov	 DWORD PTR _atl_heaplen+4, edx

; 71   : 		    break;

  00112	e9 41 01 00 00	 jmp	 $LN24@main
$LN21@main:

; 72   : 
; 73   :                 case 'I':
; 74   : 		    include[in++] = cp + 1;

  00117	8b 55 94	 mov	 edx, DWORD PTR _cp$5218[ebp]
  0011a	83 c2 01	 add	 edx, 1
  0011d	8b 45 9c	 mov	 eax, DWORD PTR _in$[ebp]
  00120	89 54 85 a0	 mov	 DWORD PTR _include$[ebp+eax*4], edx
  00124	8b 4d 9c	 mov	 ecx, DWORD PTR _in$[ebp]
  00127	83 c1 01	 add	 ecx, 1
  0012a	89 4d 9c	 mov	 DWORD PTR _in$[ebp], ecx

; 75   : 		    break;

  0012d	e9 26 01 00 00	 jmp	 $LN24@main
$LN20@main:

; 76   : 
; 77   :                 case 'R':
; 78   : 		    atl_rstklen = atol(cp + 1);

  00132	8b 55 94	 mov	 edx, DWORD PTR _cp$5218[ebp]
  00135	83 c2 01	 add	 edx, 1
  00138	52		 push	 edx
  00139	e8 00 00 00 00	 call	 _atol
  0013e	83 c4 04	 add	 esp, 4
  00141	99		 cdq
  00142	a3 00 00 00 00	 mov	 DWORD PTR _atl_rstklen, eax
  00147	89 15 04 00 00
	00		 mov	 DWORD PTR _atl_rstklen+4, edx

; 79   : 		    break;

  0014d	e9 06 01 00 00	 jmp	 $LN24@main
$LN19@main:

; 80   : 
; 81   :                 case 'S':
; 82   : 		    atl_stklen = atol(cp + 1);

  00152	8b 45 94	 mov	 eax, DWORD PTR _cp$5218[ebp]
  00155	83 c0 01	 add	 eax, 1
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _atol
  0015e	83 c4 04	 add	 esp, 4
  00161	99		 cdq
  00162	a3 00 00 00 00	 mov	 DWORD PTR _atl_stklen, eax
  00167	89 15 04 00 00
	00		 mov	 DWORD PTR _atl_stklen+4, edx

; 83   : 		    break;

  0016d	e9 e6 00 00 00	 jmp	 $LN24@main
$LN18@main:

; 84   : 
; 85   :                 case 'T':
; 86   : 		    atl_trace = TRUE;

  00172	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _atl_trace, 1
  0017c	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _atl_trace+4, 0

; 87   : 		    break;

  00186	e9 cd 00 00 00	 jmp	 $LN24@main
$LN17@main:

; 88   : 
; 89   :                 case '?':
; 90   :                 case 'U':
; 91   :                     PR("Usage:  ATLAST [options] [inputfile]\n");

  0018b	68 00 00 00 00	 push	 OFFSET $SG5234
  00190	e8 00 00 00 00	 call	 ___iob_func
  00195	83 c0 40	 add	 eax, 64			; 00000040H
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _fprintf
  0019e	83 c4 08	 add	 esp, 8

; 92   :                     PR("        Options:\n");

  001a1	68 00 00 00 00	 push	 OFFSET $SG5236
  001a6	e8 00 00 00 00	 call	 ___iob_func
  001ab	83 c0 40	 add	 eax, 64			; 00000040H
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 _fprintf
  001b4	83 c4 08	 add	 esp, 8

; 93   :                     PR("           -D     Treat file as definitions\n");

  001b7	68 00 00 00 00	 push	 OFFSET $SG5238
  001bc	e8 00 00 00 00	 call	 ___iob_func
  001c1	83 c0 40	 add	 eax, 64			; 00000040H
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 _fprintf
  001ca	83 c4 08	 add	 esp, 8

; 94   :                     PR("           -Hn    Heap length n\n");

  001cd	68 00 00 00 00	 push	 OFFSET $SG5240
  001d2	e8 00 00 00 00	 call	 ___iob_func
  001d7	83 c0 40	 add	 eax, 64			; 00000040H
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 _fprintf
  001e0	83 c4 08	 add	 esp, 8

; 95   :                     PR("           -Ifile Include named definition file\n");

  001e3	68 00 00 00 00	 push	 OFFSET $SG5242
  001e8	e8 00 00 00 00	 call	 ___iob_func
  001ed	83 c0 40	 add	 eax, 64			; 00000040H
  001f0	50		 push	 eax
  001f1	e8 00 00 00 00	 call	 _fprintf
  001f6	83 c4 08	 add	 esp, 8

; 96   :                     PR("           -Rn    Return stack length n\n");

  001f9	68 00 00 00 00	 push	 OFFSET $SG5244
  001fe	e8 00 00 00 00	 call	 ___iob_func
  00203	83 c0 40	 add	 eax, 64			; 00000040H
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 _fprintf
  0020c	83 c4 08	 add	 esp, 8

; 97   :                     PR("           -Sn    Stack length n\n");

  0020f	68 00 00 00 00	 push	 OFFSET $SG5246
  00214	e8 00 00 00 00	 call	 ___iob_func
  00219	83 c0 40	 add	 eax, 64			; 00000040H
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 _fprintf
  00222	83 c4 08	 add	 esp, 8

; 98   :                     PR("           -T     Set TRACE mode\n");

  00225	68 00 00 00 00	 push	 OFFSET $SG5248
  0022a	e8 00 00 00 00	 call	 ___iob_func
  0022f	83 c0 40	 add	 eax, 64			; 00000040H
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 _fprintf
  00238	83 c4 08	 add	 esp, 8

; 99   :                     PR("           -U     Print this message\n");

  0023b	68 00 00 00 00	 push	 OFFSET $SG5250
  00240	e8 00 00 00 00	 call	 ___iob_func
  00245	83 c0 40	 add	 eax, 64			; 00000040H
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 _fprintf
  0024e	83 c4 08	 add	 esp, 8

; 100  : 		    return 0;

  00251	33 c0		 xor	 eax, eax
  00253	e9 af 02 00 00	 jmp	 $LN31@main
$LN24@main:

; 101  : 	    }
; 102  : 	} else {

  00258	e9 ad 00 00 00	 jmp	 $LN16@main
$LN27@main:

; 103  : 	    char fn[132];
; 104  : 
; 105  : 	    if (fname) {

  0025d	83 7d f8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  00261	74 20		 je	 SHORT $LN15@main

; 106  :                 PR("Duplicate file name.\n");

  00263	68 00 00 00 00	 push	 OFFSET $SG5255
  00268	e8 00 00 00 00	 call	 ___iob_func
  0026d	83 c0 40	 add	 eax, 64			; 00000040H
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _fprintf
  00276	83 c4 08	 add	 esp, 8

; 107  : 		return 1;

  00279	b8 01 00 00 00	 mov	 eax, 1
  0027e	e9 84 02 00 00	 jmp	 $LN31@main
$LN15@main:

; 108  : 	    }
; 109  : 	    fname = TRUE;

  00283	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fname$[ebp], 1

; 110  : 	    V strcpy(fn, cp);

  0028a	8b 4d 94	 mov	 ecx, DWORD PTR _cp$5218[ebp]
  0028d	51		 push	 ecx
  0028e	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _fn$5252[ebp]
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 _strcpy
  0029a	83 c4 08	 add	 esp, 8

; 111  :             if (strchr(fn, '.') == NULL)

  0029d	6a 2e		 push	 46			; 0000002eH
  0029f	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _fn$5252[ebp]
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 _strchr
  002ab	83 c4 08	 add	 esp, 8
  002ae	85 c0		 test	 eax, eax
  002b0	75 14		 jne	 SHORT $LN14@main

; 112  :                 V strcat(fn, ".atl");

  002b2	68 00 00 00 00	 push	 OFFSET $SG5260
  002b7	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _fn$5252[ebp]
  002bd	51		 push	 ecx
  002be	e8 00 00 00 00	 call	 _strcat
  002c3	83 c4 08	 add	 esp, 8
$LN14@main:

; 113  :             ifp = fopen(fn, "r");

  002c6	68 00 00 00 00	 push	 OFFSET $SG5261
  002cb	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _fn$5252[ebp]
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 _fopen
  002d7	83 c4 08	 add	 esp, 8
  002da	89 45 fc	 mov	 DWORD PTR _ifp$[ebp], eax

; 114  : 	    if (ifp == NULL) {

  002dd	83 7d fc 00	 cmp	 DWORD PTR _ifp$[ebp], 0
  002e1	75 27		 jne	 SHORT $LN16@main

; 115  :                 V fprintf(stderr, "Unable to open file %s\n", fn);

  002e3	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _fn$5252[ebp]
  002e9	50		 push	 eax
  002ea	68 00 00 00 00	 push	 OFFSET $SG5265
  002ef	e8 00 00 00 00	 call	 ___iob_func
  002f4	83 c0 40	 add	 eax, 64			; 00000040H
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 _fprintf
  002fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  : 		return 1;

  00300	b8 01 00 00 00	 mov	 eax, 1
  00305	e9 fd 01 00 00	 jmp	 $LN31@main
$LN16@main:

; 117  : 	    }
; 118  : 	}
; 119  :      }

  0030a	e9 40 fd ff ff	 jmp	 $LN29@main
$LN28@main:

; 120  : 
; 121  :     /* If any include files were named, load each in turn before
; 122  :        we execute the program. */
; 123  : 
; 124  :     for (i = 0; i < in; i++) {

  0030f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00316	eb 09		 jmp	 SHORT $LN12@main
$LN11@main:
  00318	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0031b	83 c1 01	 add	 ecx, 1
  0031e	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$LN12@main:
  00321	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00324	3b 55 9c	 cmp	 edx, DWORD PTR _in$[ebp]
  00327	0f 8d d9 00 00
	00		 jge	 $LN10@main

; 125  : 	int stat;
; 126  : 	char fn[132];
; 127  : 	FILE *fp;
; 128  : 
; 129  : 	V strcpy(fn, include[i]);

  0032d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00330	8b 4c 85 a0	 mov	 ecx, DWORD PTR _include$[ebp+eax*4]
  00334	51		 push	 ecx
  00335	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR _fn$5270[ebp]
  0033b	52		 push	 edx
  0033c	e8 00 00 00 00	 call	 _strcpy
  00341	83 c4 08	 add	 esp, 8

; 130  :         if (strchr(fn, '.') == NULL)

  00344	6a 2e		 push	 46			; 0000002eH
  00346	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _fn$5270[ebp]
  0034c	50		 push	 eax
  0034d	e8 00 00 00 00	 call	 _strchr
  00352	83 c4 08	 add	 esp, 8
  00355	85 c0		 test	 eax, eax
  00357	75 14		 jne	 SHORT $LN9@main

; 131  :             V strcat(fn, ".atl");

  00359	68 00 00 00 00	 push	 OFFSET $SG5276
  0035e	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _fn$5270[ebp]
  00364	51		 push	 ecx
  00365	e8 00 00 00 00	 call	 _strcat
  0036a	83 c4 08	 add	 esp, 8
$LN9@main:

; 132  : 	fp = fopen(fn,
; 133  : #ifdef FBmode
; 134  :                         "rb"
; 135  : #else
; 136  :                         "r"
; 137  : #endif
; 138  : 		  );

  0036d	68 00 00 00 00	 push	 OFFSET $SG5277
  00372	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR _fn$5270[ebp]
  00378	52		 push	 edx
  00379	e8 00 00 00 00	 call	 _fopen
  0037e	83 c4 08	 add	 esp, 8
  00381	89 85 fc fe ff
	ff		 mov	 DWORD PTR _fp$5271[ebp], eax

; 139  : 	if (fp == NULL) {

  00387	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _fp$5271[ebp], 0
  0038e	75 28		 jne	 SHORT $LN8@main

; 140  :             V fprintf(stderr, "Unable to open include file %s\n",
; 141  : 		include[i]);

  00390	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00393	8b 4c 85 a0	 mov	 ecx, DWORD PTR _include$[ebp+eax*4]
  00397	51		 push	 ecx
  00398	68 00 00 00 00	 push	 OFFSET $SG5281
  0039d	e8 00 00 00 00	 call	 ___iob_func
  003a2	83 c0 40	 add	 eax, 64			; 00000040H
  003a5	50		 push	 eax
  003a6	e8 00 00 00 00	 call	 _fprintf
  003ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 142  : 	    return 1;

  003ae	b8 01 00 00 00	 mov	 eax, 1
  003b3	e9 4f 01 00 00	 jmp	 $LN31@main
$LN8@main:

; 143  : 	}
; 144  : 	stat = atl_load(fp);

  003b8	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _fp$5271[ebp]
  003be	52		 push	 edx
  003bf	e8 00 00 00 00	 call	 _atl_load
  003c4	83 c4 04	 add	 esp, 4
  003c7	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _stat$5269[ebp], eax

; 145  : 	V fclose(fp);

  003cd	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _fp$5271[ebp]
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 _fclose
  003d9	83 c4 04	 add	 esp, 4

; 146  : 	if (stat != ATL_SNORM) {

  003dc	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _stat$5269[ebp], 0
  003e3	74 1c		 je	 SHORT $LN7@main

; 147  :             V printf("\nError %d in include file %s\n", stat, include[i]);

  003e5	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  003e8	8b 54 8d a0	 mov	 edx, DWORD PTR _include$[ebp+ecx*4]
  003ec	52		 push	 edx
  003ed	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _stat$5269[ebp]
  003f3	50		 push	 eax
  003f4	68 00 00 00 00	 push	 OFFSET $SG5285
  003f9	e8 00 00 00 00	 call	 _printf
  003fe	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@main:

; 148  : 	}
; 149  :     }

  00401	e9 12 ff ff ff	 jmp	 $LN11@main
$LN10@main:

; 150  : 
; 151  :     /* Now that all the preliminaries are out of the way, fall into
; 152  :        the main ATLAST execution loop. */
; 153  : 
; 154  :     V signal(SIGINT, ctrlc);

  00406	68 00 00 00 00	 push	 OFFSET _ctrlc
  0040b	6a 02		 push	 2
  0040d	e8 00 00 00 00	 call	 _signal
  00412	83 c4 08	 add	 esp, 8
$LN6@main:

; 155  :     while (TRUE) {

  00415	b9 01 00 00 00	 mov	 ecx, 1
  0041a	85 c9		 test	 ecx, ecx
  0041c	0f 84 d0 00 00
	00		 je	 $LN5@main

; 156  : 	char t[132];
; 157  : 
; 158  : 	if (!fname)

  00422	83 7d f8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  00426	75 72		 jne	 SHORT $LN4@main

; 159  :             V printf(atl_comment ? "(  " :  /* Show pending comment */
; 160  : 		/* Show compiling state */
; 161  :                 (((heap != NULL) && state) ? ":> " : "-> "));

  00428	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atl_comment
  0042e	0b 15 04 00 00
	00		 or	 edx, DWORD PTR _atl_comment+4
  00434	74 0c		 je	 SHORT $LN35@main
  00436	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv235[ebp], OFFSET $SG5294
  00440	eb 49		 jmp	 SHORT $LN36@main
$LN35@main:
  00442	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _heap, 0
  00449	74 2a		 je	 SHORT $LN33@main
  0044b	a1 00 00 00 00	 mov	 eax, DWORD PTR _heap
  00450	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv370[ebp], eax
  00456	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR tv370[ebp]
  0045c	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR tv370[ebp]
  00462	8b 01		 mov	 eax, DWORD PTR [ecx]
  00464	0b 42 04	 or	 eax, DWORD PTR [edx+4]
  00467	74 0c		 je	 SHORT $LN33@main
  00469	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], OFFSET $SG5295
  00473	eb 0a		 jmp	 SHORT $LN34@main
$LN33@main:
  00475	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], OFFSET $SG5296
$LN34@main:
  0047f	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR tv233[ebp]
  00485	89 8d e0 fd ff
	ff		 mov	 DWORD PTR tv235[ebp], ecx
$LN36@main:
  0048b	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR tv235[ebp]
  00491	52		 push	 edx
  00492	e8 00 00 00 00	 call	 _printf
  00497	83 c4 04	 add	 esp, 4
$LN4@main:

; 162  : 	if (fgets(t, 132, ifp) == NULL) {

  0049a	8b 45 fc	 mov	 eax, DWORD PTR _ifp$[ebp]
  0049d	50		 push	 eax
  0049e	68 84 00 00 00	 push	 132			; 00000084H
  004a3	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _t$5290[ebp]
  004a9	51		 push	 ecx
  004aa	e8 00 00 00 00	 call	 _fgets
  004af	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b2	85 c0		 test	 eax, eax
  004b4	75 28		 jne	 SHORT $LN3@main

; 163  : 	    if (fname && defmode) {

  004b6	83 7d f8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  004ba	74 20		 je	 SHORT $LN2@main
  004bc	83 7d 98 00	 cmp	 DWORD PTR _defmode$[ebp], 0
  004c0	74 1a		 je	 SHORT $LN2@main

; 164  : 		fname = defmode = FALSE;

  004c2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _defmode$[ebp], 0
  004c9	8b 55 98	 mov	 edx, DWORD PTR _defmode$[ebp]
  004cc	89 55 f8	 mov	 DWORD PTR _fname$[ebp], edx

; 165  : 		ifp = stdin;

  004cf	e8 00 00 00 00	 call	 ___iob_func
  004d4	89 45 fc	 mov	 DWORD PTR _ifp$[ebp], eax

; 166  : 		continue;

  004d7	e9 39 ff ff ff	 jmp	 $LN6@main
$LN2@main:

; 167  : 	    }
; 168  : 	    break;

  004dc	eb 14		 jmp	 SHORT $LN5@main
$LN3@main:

; 169  : 	}
; 170  : 	V atl_eval(t);

  004de	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _t$5290[ebp]
  004e4	50		 push	 eax
  004e5	e8 00 00 00 00	 call	 _atl_eval
  004ea	83 c4 04	 add	 esp, 4

; 171  :     }

  004ed	e9 23 ff ff ff	 jmp	 $LN6@main
$LN5@main:

; 172  :     if (!fname)

  004f2	83 7d f8 00	 cmp	 DWORD PTR _fname$[ebp], 0
  004f6	75 0d		 jne	 SHORT $LN1@main

; 173  :         V printf("\n");

  004f8	68 00 00 00 00	 push	 OFFSET $SG5303
  004fd	e8 00 00 00 00	 call	 _printf
  00502	83 c4 04	 add	 esp, 4
$LN1@main:

; 174  :     return 0;

  00505	33 c0		 xor	 eax, eax
$LN31@main:

; 175  : }

  00507	8b 4d 8c	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0050a	33 cd		 xor	 ecx, ebp
  0050c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00511	8b e5		 mov	 esp, ebp
  00513	5d		 pop	 ebp
  00514	c3		 ret	 0
  00515	8d 49 00	 npad	 3
$LN39@main:
  00518	00 00 00 00	 DD	 $LN17@main
  0051c	00 00 00 00	 DD	 $LN23@main
  00520	00 00 00 00	 DD	 $LN22@main
  00524	00 00 00 00	 DD	 $LN21@main
  00528	00 00 00 00	 DD	 $LN20@main
  0052c	00 00 00 00	 DD	 $LN19@main
  00530	00 00 00 00	 DD	 $LN18@main
  00534	00 00 00 00	 DD	 $LN24@main
$LN38@main:
  00538	00		 DB	 0
  00539	07		 DB	 7
  0053a	07		 DB	 7
  0053b	07		 DB	 7
  0053c	07		 DB	 7
  0053d	01		 DB	 1
  0053e	07		 DB	 7
  0053f	07		 DB	 7
  00540	07		 DB	 7
  00541	02		 DB	 2
  00542	03		 DB	 3
  00543	07		 DB	 7
  00544	07		 DB	 7
  00545	07		 DB	 7
  00546	07		 DB	 7
  00547	07		 DB	 7
  00548	07		 DB	 7
  00549	07		 DB	 7
  0054a	07		 DB	 7
  0054b	04		 DB	 4
  0054c	05		 DB	 5
  0054d	06		 DB	 6
  0054e	00		 DB	 0
_main	ENDP
_TEXT	ENDS
EXTRN	_atl_break:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_sig$ = 8						; size = 4
_ctrlc	PROC

; 35   : {

  00550	55		 push	 ebp
  00551	8b ec		 mov	 ebp, esp

; 36   :     if (sig == SIGINT)

  00553	83 7d 08 02	 cmp	 DWORD PTR _sig$[ebp], 2
  00557	75 05		 jne	 SHORT $LN2@ctrlc

; 37   : 	atl_break();

  00559	e8 00 00 00 00	 call	 _atl_break
$LN2@ctrlc:

; 38   : }

  0055e	5d		 pop	 ebp
  0055f	c3		 ret	 0
_ctrlc	ENDP
_TEXT	ENDS
END
